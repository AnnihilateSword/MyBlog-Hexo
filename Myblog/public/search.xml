<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA</title>
      <link href="/2024/03/09/%E3%80%90UE5%20C++%E3%80%91%E9%B1%BC%E7%9C%BC%E5%9B%BE%E5%83%8F%E9%94%AF%E9%BD%BF%E4%BC%98%E5%8C%96%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%BA%8C%EF%BC%89MSAA/"/>
      <url>/2024/03/09/%E3%80%90UE5%20C++%E3%80%91%E9%B1%BC%E7%9C%BC%E5%9B%BE%E5%83%8F%E9%94%AF%E9%BD%BF%E4%BC%98%E5%8C%96%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%BA%8C%EF%BC%89MSAA/</url>
      
        <content type="html"><![CDATA[<p>上一篇讲到使用高斯模糊后处理的方式来一定程度上消除鱼眼图像的边缘锯齿，但是会导致一定的模糊和重影。</p><p>高斯模糊并不是主流抗锯齿方案，本文介绍一些主流的抗锯齿方案，以及如何在 UE5 中实现 <strong>MSAA</strong> 后处理材质来优化鱼眼图像边缘锯齿。</p><h1 id="锯齿产生的原因"><a href="#锯齿产生的原因" class="headerlink" title="锯齿产生的原因"></a>锯齿产生的原因</h1><p>我们都知道，显示器屏幕是由一个一个的像素组成的，所以渲染的过程需要将屏幕中的像素进行填充。</p><p>图形渲染的流程，就是一个一个的三角形，通过顶点着色器-&gt;光栅化-&gt;像素着色器这样的顺序进行渲染。</p><p>如下图所示，是光栅化时一个三角形的上边界。如果三角形覆盖了像素的中心点，则该像素点被着色。如果三角形没有覆盖到该像素的中心点，该像素不会被着色。可以看出三角形在光栅化时，覆盖到的像素点是离散的、断断续续的，这样就形成了 <strong>锯齿&#x2F;aliasing</strong>。</p><p>这样的斜线形成的锯齿，是阶梯状的，因此也被称为 <strong>stair-stepping</strong>。</p><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/1_边界锯齿的形成.jpg" width = 800px><p>而实际情况下，我们期望得到的结果应该是如下图所示这样的。每个像素点，根据三角形对当前像素正方形覆盖的面积，按比例贡献颜色值。这就是我们的抗锯齿技术想要达到的目标。</p><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/2_理想的抗锯齿边界.jpg" width = 800px><h1 id="实现抗锯齿的两种思路"><a href="#实现抗锯齿的两种思路" class="headerlink" title="实现抗锯齿的两种思路"></a>实现抗锯齿的两种思路</h1><p>知道了锯齿产生的原因和期望的抗锯齿的目标，现在我们有两种思路去实现抗锯齿效果。</p><p>第一种思路自然就是在每个像素中进行多次采样，然后根据多次采样的结果综合来计算像素的颜色值。使用这种方式来实现的抗锯齿技术有 <strong>MSAA，TAA</strong>。</p><p>第二种思路是通过后处理的方式，寻找屏幕中的像素块边界，然后根据边界的信息，将两侧的像素点颜色进行插值，这样就会得到平滑过渡的边缘，实现抗锯齿的效果。使用这种方式来实现的抗锯齿技术有 <strong>FXAA，SMAA</strong>。</p><h1 id="UE5-实现-MSAA-后处理材质"><a href="#UE5-实现-MSAA-后处理材质" class="headerlink" title="UE5 实现 MSAA 后处理材质"></a>UE5 实现 MSAA 后处理材质</h1><h2 id="魔改-shadertoy-MSAA-代码"><a href="#魔改-shadertoy-MSAA-代码" class="headerlink" title="魔改 shadertoy MSAA 代码"></a>魔改 shadertoy MSAA 代码</h2><p>这里我魔改的样例是：<a href="https://www.shadertoy.com/view/3tdGD7">shadertoy MSAA</a></p><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/3_shaertoy_msaa.png" width = 800px><p>魔改代码：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> checkerboard(<span class="type">vec2</span> uv) &#123;</span><br><span class="line">    <span class="type">vec2</span> adjusted = <span class="built_in">floor</span>(uv);</span><br><span class="line"> <span class="type">bool</span> inside = <span class="built_in">mod</span>(adjusted.y, <span class="number">2.0</span>) == <span class="number">1.0</span></span><br><span class="line">? <span class="built_in">mod</span>(adjusted.x, <span class="number">2.0</span>) == <span class="number">0.0</span></span><br><span class="line">        : <span class="built_in">mod</span>(adjusted.x, <span class="number">2.0</span>) == <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">return</span> inside ? <span class="number">1.0</span> : <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct HitResult &#123; <span class="type">bool</span> hit; <span class="type">vec3</span> point; &#125;;</span><br><span class="line">struct Ray &#123; <span class="type">vec3</span> origin; <span class="type">vec3</span> direction; &#125;;</span><br><span class="line">struct Plane &#123; <span class="type">vec3</span> origin; <span class="type">vec3</span> normal; &#125;;</span><br><span class="line"></span><br><span class="line">HitResult rayPlaneIntersect(Ray ray, Plane plane) &#123;</span><br><span class="line"> <span class="type">float</span> horizonDot = <span class="built_in">dot</span>(ray.direction, plane.normal);</span><br><span class="line">    <span class="keyword">if</span> (horizonDot &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line"><span class="type">vec3</span> difference = plane.origin - ray.origin;</span><br><span class="line">        <span class="type">float</span> time = <span class="built_in">dot</span>(difference, plane.normal) / horizonDot;</span><br><span class="line">        </span><br><span class="line">        <span class="type">bool</span> hit = time &gt; <span class="number">0.0</span>;</span><br><span class="line">        <span class="type">vec3</span> point = hit</span><br><span class="line">            ? ray.origin + ray.direction * time</span><br><span class="line">            : <span class="type">vec3</span>(<span class="number">0.0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> HitResult(hit, point);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> HitResult(<span class="literal">false</span>, <span class="type">vec3</span>(<span class="number">0.0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">vec3</span> scene(<span class="type">vec2</span> uv) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="type">vec3</span> up = <span class="type">vec3</span>(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">vec3</span> origin = <span class="type">vec3</span>(<span class="number">0.0</span>, <span class="number">2.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="type">vec3</span> rayDirection = <span class="built_in">normalize</span>(<span class="type">vec3</span>(uv.x, uv.y, <span class="number">0.9</span>));</span><br><span class="line">    </span><br><span class="line">    Ray ray = Ray(origin, rayDirection);</span><br><span class="line">    Plane plane = Plane(<span class="type">vec3</span>(<span class="number">0.0</span>), up);  </span><br><span class="line">    </span><br><span class="line">    HitResult result = rayPlaneIntersect(ray, plane);</span><br><span class="line"></span><br><span class="line">    <span class="type">vec3</span> color = result.hit</span><br><span class="line">        ? <span class="type">vec3</span>(checkerboard(result.point.xz))</span><br><span class="line">        : <span class="type">vec3</span>(rayDirection.x, rayDirection.y, rayDirection.z);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">vec2</span> coordToUv(<span class="type">vec2</span> coord) &#123;</span><br><span class="line"> <span class="keyword">return</span> (coord - iResolution.xy * <span class="number">0.5</span>) / iResolution.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> mainImage( <span class="keyword">out</span> <span class="type">vec4</span> fragColor, <span class="keyword">in</span> <span class="type">vec2</span> fragCoord ) &#123;</span><br><span class="line">    <span class="type">float</span> a = (<span class="number">3.0</span> / <span class="number">8.0</span>);</span><br><span class="line">    <span class="type">float</span> b = (<span class="number">1.0</span> / <span class="number">8.0</span>);</span><br><span class="line">    <span class="type">vec3</span> acc = <span class="type">vec3</span>(<span class="number">0.0</span>);</span><br><span class="line">    acc += scene(coordToUv(fragCoord + <span class="type">vec2</span>(-a, b)));</span><br><span class="line">    acc += scene(coordToUv(fragCoord + <span class="type">vec2</span>(-b, -a)));</span><br><span class="line">    acc += scene(coordToUv(fragCoord + <span class="type">vec2</span>(a, -b)));</span><br><span class="line">    acc += scene(coordToUv(fragCoord + <span class="type">vec2</span>(b, a)));</span><br><span class="line">    acc /= <span class="number">4.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">vec3</span> color = acc;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//color = pow(color, vec3(1.0 / 2.2));</span></span><br><span class="line">    </span><br><span class="line">    fragColor = <span class="type">vec4</span>(color, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里魔改代码是因为 <strong>shadertoy</strong> 上的作者写的代码会有很多专门用于 <strong>shadertoy</strong> 的，对于移植到 <strong>UE5</strong> 上没有任何作用（ 对于我们移植代码来说相当于是废代码，可以删除 ）</p><p>将该代码粘贴至 Image 下编译运行：</p><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/4_shaertoy_msaa_change.png" width = 800px><h2 id="将魔改的代码移植到-UE5"><a href="#将魔改的代码移植到-UE5" class="headerlink" title="将魔改的代码移植到 UE5"></a>将魔改的代码移植到 UE5</h2><ol><li>新建材质函数 <code>MF_Scene</code> 用于更新场景，这里根据 Uv 来改变场景像素位置</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/5.png" width = 800px><ol start="2"><li>新建后处理材质 <code>PP_MSAA</code></li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/6.png" width = 800px><blockquote><p>这里的名称例如：aa_picsize（这是图片大小），是通过脱出节点然后输入 <strong>name</strong> 设置的类似变量的节点，方便后续使用，个人习惯，这样更容易管理</p></blockquote><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/7.png" width = 800px><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/8.png" width = 800px><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/9.png" width = 800px><ol start="3"><li>最后将 <strong>acc</strong> 输出</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/10.png" width = 800px><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p>测试场景：Living_Dining_Room-1</p><h2 id="默认场景光照下（静止）"><a href="#默认场景光照下（静止）" class="headerlink" title="默认场景光照下（静止）"></a>默认场景光照下（静止）</h2><ol><li>项目抗锯齿 TAA + 鱼眼畸变：</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/11_1_before.png" width = 800px><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/11_2_before.png" width = 800px><ol start="2"><li>项目抗锯齿 TAA + 鱼眼畸变 + MSAA：</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/11_3_after.png" width = 800px><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/11_4_after.png" width = 800px><ol start="3"><li>再对比一下使用高斯模糊的效果：</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/11_5_after.png" width = 800px><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/11_6_after.png" width = 800px><p>明显是 MSAA 更胜一筹！</p><h2 id="降低场景亮度（静止）"><a href="#降低场景亮度（静止）" class="headerlink" title="降低场景亮度（静止）"></a>降低场景亮度（静止）</h2><ol><li>项目抗锯齿 TAA + 鱼眼畸变：</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/12_1_before.png" width = 800px><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/12_2_before.png" width = 800px><ol start="2"><li>项目抗锯齿 TAA + 鱼眼畸变 + MSAA：</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/12_3_after.png" width = 800px><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/12_4_after.png" width = 800px><h2 id="默认场景光照下（运动-已关闭运动模糊）"><a href="#默认场景光照下（运动-已关闭运动模糊）" class="headerlink" title="默认场景光照下（运动-已关闭运动模糊）"></a>默认场景光照下（运动-已关闭运动模糊）</h2><ol><li>项目抗锯齿 TAA + 鱼眼畸变：</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/13_before.gif" width = 800px><ol start="2"><li>项目抗锯齿 TAA + 鱼眼畸变 + MSAA：</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/13_after.gif" width = 800px><h2 id="降低场景亮度（运动-已关闭运动模糊）"><a href="#降低场景亮度（运动-已关闭运动模糊）" class="headerlink" title="降低场景亮度（运动-已关闭运动模糊）"></a>降低场景亮度（运动-已关闭运动模糊）</h2><ol><li>项目抗锯齿 TAA + 鱼眼畸变：</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/14_before.gif" width = 800px><ol start="2"><li>项目抗锯齿 TAA + 鱼眼畸变 + MSAA：</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（二）MSAA/14_after.gif" width = 800px><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>主流抗锯齿方案详解（一）：<a href="https://zhuanlan.zhihu.com/p/415087003">https://zhuanlan.zhihu.com/p/415087003</a></p><p>抗锯齿相关技术介绍：<a href="https://www.cnblogs.com/somedayLi/p/12445939.html">https://www.cnblogs.com/somedayLi/p/12445939.html</a></p><p>图形学基础-抗锯齿：<a href="https://www.liaomz.top/2022/02/27/tu-xing-xue-ji-chu-kang-ju-chi/">https://www.liaomz.top/2022/02/27/tu-xing-xue-ji-chu-kang-ju-chi/</a></p><p>MSAA-GLSL 代码参考：<a href="https://www.shadertoy.com/view/3tdGD7">https://www.shadertoy.com/view/3tdGD7</a></p><p>The End.</p>]]></content>
      
      
      
        <tags>
            
            <tag> UE5 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊</title>
      <link href="/2024/03/09/%E3%80%90UE5%20C++%E3%80%91%E9%B1%BC%E7%9C%BC%E5%9B%BE%E5%83%8F%E9%94%AF%E9%BD%BF%E4%BC%98%E5%8C%96%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%80%EF%BC%89%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/"/>
      <url>/2024/03/09/%E3%80%90UE5%20C++%E3%80%91%E9%B1%BC%E7%9C%BC%E5%9B%BE%E5%83%8F%E9%94%AF%E9%BD%BF%E4%BC%98%E5%8C%96%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%80%EF%BC%89%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="鱼眼锯齿产生原因"><a href="#鱼眼锯齿产生原因" class="headerlink" title="鱼眼锯齿产生原因"></a>鱼眼锯齿产生原因</h1><p>虽然在引擎的项目设置中已经开启了抗锯齿的选项，但由于鱼眼畸变的影响，又使图像产生了边缘锯齿。</p><p>因为需要实时处理图像，所以打算在当前已有的鱼眼后处理效果上再加一层抗锯齿或者模糊。</p><p>下面介绍如何在 UE5 中使用 <strong>高斯模糊后处理</strong> 来一定程度的消除锯齿。</p><h1 id="材质自定义表达式中引用-USF"><a href="#材质自定义表达式中引用-USF" class="headerlink" title="材质自定义表达式中引用 USF"></a>材质自定义表达式中引用 USF</h1><h2 id="Generate-Visual-Studio-project-files"><a href="#Generate-Visual-Studio-project-files" class="headerlink" title="Generate Visual Studio project files"></a>Generate Visual Studio project files</h2><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/2_1.png" width = 800px><h2 id="添加（自定义模块的）文件映射路径"><a href="#添加（自定义模块的）文件映射路径" class="headerlink" title="添加（自定义模块的）文件映射路径"></a>添加（自定义模块的）文件映射路径</h2><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/2_2.png" width = 800px><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/2_3.png" width = 800px><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/2_4.png" width = 800px><h2 id="重新生成项目"><a href="#重新生成项目" class="headerlink" title="重新生成项目"></a>重新生成项目</h2><p><font color=red>为了防止文件冲突，删除掉 Binaries 和 Intermediate 文件夹之后，再次点击 Uproject 右键 Generate Visual Studio project files</p><p>重新生成之后，进入解决方案 Build 成功之后，在材质表达式中引用 USF 文件了</font></p><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/2_5.png" width = 800px><h1 id="创建-Gaussian-Blur-后处理材质"><a href="#创建-Gaussian-Blur-后处理材质" class="headerlink" title="创建 Gaussian Blur 后处理材质"></a>创建 Gaussian Blur 后处理材质</h1><h2 id="确定好高斯模糊公式"><a href="#确定好高斯模糊公式" class="headerlink" title="确定好高斯模糊公式"></a>确定好高斯模糊公式</h2><p>曲线接受大约从 -1 到 1 的输入。然后，它将输出一个从 0 到 1 的值。</p><p><a href="https://www.desmos.com/calculator/2rpzsgh5ol?lang=zh-CN">一维简化高斯函数</a>：</p><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/3_1_GaussianFunc.png" width = 300px><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">struct FunctionStruct</span><br><span class="line">&#123;</span><br><span class="line">    //计算一维高斯模糊</span><br><span class="line">    float Cal_1DGaussian(float x)</span><br><span class="line">    &#123;</span><br><span class="line">        return exp(-0.5f * pow(3.141 * x, 2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">FunctionStruct FS;</span><br><span class="line"></span><br><span class="line">//需要获得的场景贴图index</span><br><span class="line">static const int SceneTextureID = 14;</span><br><span class="line">//纹素大小，比如一张512 X 512大小的纹理，那么纹素大小为（1/512）</span><br><span class="line">//用于UV的偏移</span><br><span class="line">float2 TexelSize = View.ViewSizeAndInvSize.zw;</span><br><span class="line">//获取当前像素的UV</span><br><span class="line">float2 UV = GetDefaultSceneTextureUV(Parameters, SceneTextureID);</span><br><span class="line">//用于存储累积的颜色</span><br><span class="line">float3 PixelSum = float3(0, 0, 0);</span><br><span class="line">//累积权重值</span><br><span class="line">float WeightSum = 0;</span><br><span class="line"></span><br><span class="line">//水平与垂直模糊</span><br><span class="line">for (int x = -BlurRadius;x&lt;=BlurRadius;x++)</span><br><span class="line">&#123;</span><br><span class="line">    for (int y = -BlurRadius;y&lt;=BlurRadius;y++)</span><br><span class="line">    &#123;</span><br><span class="line">        //计算偏移的UV</span><br><span class="line">        float2 offsetUV = UV + float2(x,y)*TexelSize;</span><br><span class="line">        //采样偏移后的贴图颜色</span><br><span class="line">        float3 PixelColor = SceneTextureLookup(offsetUV,SceneTextureID,false).rgb;</span><br><span class="line">        //计算采样像素的权重，/Raduis的原因是为了限制输入范围为-1到1</span><br><span class="line">        float weight = FS.Cal_1DGaussian(x / BlurRadius) * FS.Cal_1DGaussian(y / BlurRadius);</span><br><span class="line">        //累加颜色</span><br><span class="line">        PixelSum += PixelColor*weight;</span><br><span class="line">        //累加权重值</span><br><span class="line">        WeightSum += weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//返回加权平均值</span><br><span class="line">return PixelSum / WeightSum;</span><br></pre></td></tr></table></figure><p>在项目目录创建 <code>Shaders</code> 文件夹，并在 <code>Shaders</code> 文件夹下新建 <code>Gaussian.usf</code> 文件</p><p>将代码写入该文件，供后续使用</p><p>材质节点参考：</p><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/3_2_GaussianBlur.png" width = 800px><h1 id="添加后处理材质"><a href="#添加后处理材质" class="headerlink" title="添加后处理材质"></a>添加后处理材质</h1><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/4_1_AddPostProcessMaterial.png" width = 800px><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><ol><li>项目抗锯齿 TAA + 鱼眼畸变：</li></ol><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/5_1_before.png" width = 800px><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/5_2_before.png" width = 800px><ol start="2"><li>项目抗锯齿 TAA + 鱼眼畸变 + 高斯模糊：</li></ol><blockquote><p><strong>【BlurRadius参数 &#x3D; 1.5】</strong>（ 默认为 1.5 ）</p></blockquote><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/5_3_after.png" width = 800px><img src="/res/img/post/【UE5 C++】鱼眼图像锯齿优化探索（一）高斯模糊/5_4_after.png" width = 800px><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>自定义着色器教程：<a href="https://www.kodeco.com/57-unreal-engine-4-custom-shaders-tutorial">https://www.kodeco.com/57-unreal-engine-4-custom-shaders-tutorial</a></p><p>Gaussian Smoothing：<a href="https://homepages.inf.ed.ac.uk/rbf/HIPR2/gsmooth.htm">https://homepages.inf.ed.ac.uk/rbf/HIPR2/gsmooth.htm</a></p><p>UE4[C++]添加自定义模块：<a href="https://zhuanlan.zhihu.com/p/101179587">https://zhuanlan.zhihu.com/p/101179587</a></p><p>The End.</p>]]></content>
      
      
      
        <tags>
            
            <tag> UE5 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【UE5 C++】材质自定义表达式中引用USF</title>
      <link href="/2024/03/09/%E3%80%90UE5%20C++%E3%80%91%E6%9D%90%E8%B4%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E5%BC%95%E7%94%A8USF/"/>
      <url>/2024/03/09/%E3%80%90UE5%20C++%E3%80%91%E6%9D%90%E8%B4%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E5%BC%95%E7%94%A8USF/</url>
      
        <content type="html"><![CDATA[<p>Generate Visual Studio project files</p><img src="/res/img/post/【UE5 C++】材质自定义表达式中引用USF/1.png" width=800px><h1 id="添加（自定义模块的）文件映射路径"><a href="#添加（自定义模块的）文件映射路径" class="headerlink" title="添加（自定义模块的）文件映射路径"></a>添加（自定义模块的）文件映射路径</h1><img src="/res/img/post/【UE5 C++】材质自定义表达式中引用USF/2.png" width=800px><img src="/res/img/post/【UE5 C++】材质自定义表达式中引用USF/3.png" width=800px><img src="/res/img/post/【UE5 C++】材质自定义表达式中引用USF/4.png" width=800px><h1 id="重新生成项目"><a href="#重新生成项目" class="headerlink" title="重新生成项目"></a>重新生成项目</h1><p><font color=red>为了防止文件冲突，删除掉 Binaries 和 Intermediate 文件夹之后，再次点击 Uproject 右键 Generate Visual Studio project files</p><p>重新生成之后，进入解决方案 Build 成功之后，在材质表达式中引用 USF 文件了</font></p><img src="/res/img/post/【UE5 C++】材质自定义表达式中引用USF/5.png" width=800px><p>The End.</p>]]></content>
      
      
      
        <tags>
            
            <tag> UE5 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【UE5 C++】Interface</title>
      <link href="/2024/02/25/%E3%80%90UE5%20C++%E3%80%91Interface/"/>
      <url>/2024/02/25/%E3%80%90UE5%20C++%E3%80%91Interface/</url>
      
        <content type="html"><![CDATA[<iframe src="https://player.bilibili.com/player.html?aid=1601182894&bvid=BV1R2421T7be&cid=1451083280&p=1&high_quality=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol><li><p>使用接口一般做什么？</p><p> 例如我们有一个拾取交互系统，我们可以拾取水，食物，或者弹药，但是拾取水的时候我们可能希望减少我们的饥渴度或者存储到库存中，拾取到食物可能希望检视饥饿或者存储到库存，拾取到弹药可能希望存储起来，一般不会吃弹药，接口给每个继承自接口的类强制实现了拾取函数，但每个继承了该接口的类又可以重写该函数，以实现不同的行为。</p></li><li><p>为什么使用接口？</p><p> 其实不适用接口也能实现相同的功能，但是使用接口有很多有点：<br> 优点：在开发中利于代码的维护，有利于代码的规范性，保密性等。</p></li><li><p>为什么不使用基本的C++类？</p><p> C++ 默认情况下没有接口的概念，一般使用纯虚函数，<br> Unreal Engine 给我们提供了接口的概念。</p></li></ol><h1 id="在-C-中声明接口"><a href="#在-C-中声明接口" class="headerlink" title="在 C++ 中声明接口"></a>在 C++ 中声明接口</h1><h2 id="新建-InteractInterface-类"><a href="#新建-InteractInterface-类" class="headerlink" title="新建 InteractInterface 类"></a>新建 InteractInterface 类</h2><img src="/res/img/post/【UE5 C++】Interface/1.png" width=800px><img src="/res/img/post/【UE5 C++】Interface/2.png" width=800px><p>在 C++ 中声明接口与声明普通的 Unreal 类类似。但是，存在一些主要差异：</p><ul><li>接口类使用 <code>UINTERFACE</code> 宏而不是 <code>UCLASS</code> 宏</li><li>接口类继承自 <code>UInterface</code> 而不是 <code>UObject</code></li></ul><blockquote><p>UINTERFACE 类不是实际的接口，而是一个为反射系统提供可见性的空类。</p></blockquote><h2 id="C-声明示例"><a href="#C-声明示例" class="headerlink" title="C++ 声明示例"></a>C++ 声明示例</h2><p><code>InteractInterface.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UObject/Interface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InteractInterface.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This class does not need to be modified.</span></span><br><span class="line"><span class="built_in">UINTERFACE</span>(MinimalAPI)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UInteractInterface</span> : <span class="keyword">public</span> UInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">INTERFACE_API</span> IInteractInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add interface functions to this class. This is the class that will be inherited to implement this interface.</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 声明一个虚函数 Interact</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Interact</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以添加一个空实现</p><p><code>InteractInterface.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Interfaces/InteractInterface.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Add default functionality here for any IInteractInterface functions that are not pure virtual.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IInteractInterface::Interact</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建一个测试用的-Actor-类"><a href="#创建一个测试用的-Actor-类" class="headerlink" title="创建一个测试用的 Actor 类"></a>创建一个测试用的 Actor 类</h2><img src="/res/img/post/【UE5 C++】Interface/3.png" width=800px><img src="/res/img/post/【UE5 C++】Interface/4.png" width=800px><h1 id="在-C-实现接口"><a href="#在-C-实现接口" class="headerlink" title="在 C++ 实现接口"></a>在 C++ 实现接口</h1><p><code>TestActorThatPrintLog.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Actor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Interfaces/InteractInterface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TestActorThatPrintLog.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">INTERFACE_API</span> ATestActorThatPrintLog : <span class="keyword">public</span> AActor, <span class="keyword">public</span> IInteractInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Sets default values for this actor&#x27;s properties</span></span><br><span class="line"><span class="built_in">ATestActorThatPrintLog</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Called every frame</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Tick</span><span class="params">(<span class="type">float</span> DeltaTime)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Interact</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>TestActorThatPrintLog.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Test/TestActorThatPrintLog.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default values</span></span><br><span class="line">ATestActorThatPrintLog::<span class="built_in">ATestActorThatPrintLog</span>()</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don&#x27;t need it.</span></span><br><span class="line">PrimaryActorTick.bCanEverTick = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ATestActorThatPrintLog::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called every frame</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ATestActorThatPrintLog::Tick</span><span class="params">(<span class="type">float</span> DeltaTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">Tick</span>(DeltaTime);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ATestActorThatPrintLog::Interact</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Interact Actor!!!&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>InterfaceCharacter.h</code> 中添加实现，我这里项目名称是 <code>Interface</code>，项目不同名称会有所不同</p><img src="/res/img/post/【UE5 C++】Interface/5.png" width=800px><p>添加实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AInterfaceCharacter::InteractLineTrace</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FVector Start = <span class="built_in">GetFollowCamera</span>()-&gt;<span class="built_in">GetComponentLocation</span>();</span><br><span class="line">FVector End = Start + <span class="built_in">GetFollowCamera</span>()-&gt;<span class="built_in">GetComponentRotation</span>().<span class="built_in">Vector</span>() * <span class="number">800.0f</span>;</span><br><span class="line"></span><br><span class="line">FHitResult HitResult;</span><br><span class="line">FCollisionQueryParams CollisionQueryParams;</span><br><span class="line">CollisionQueryParams.<span class="built_in">AddIgnoredActor</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">GetWorld</span>()-&gt;<span class="built_in">LineTraceSingleByChannel</span>(HitResult, Start, End, ECC_Visibility, CollisionQueryParams))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (IInteractInterface* InteractInterface = <span class="built_in">Cast</span>&lt;IInteractInterface&gt;(HitResult.<span class="built_in">GetActor</span>()))</span><br><span class="line">&#123;</span><br><span class="line">InteractInterface-&gt;<span class="built_in">Interact</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">DrawDebugLine</span>(<span class="built_in">GetWorld</span>(), Start, End, FColor::Red, <span class="literal">false</span>, <span class="number">3.0f</span>, <span class="number">0</span>, <span class="number">2.0f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建蓝图类</p><img src="/res/img/post/【UE5 C++】Interface/6.png" width=800px><p>添加网格体组件</p><img src="/res/img/post/【UE5 C++】Interface/7.png" width=800px><p>角色蓝图中调用 <code>InteractLineTrace</code> 函数用作测试</p><img src="/res/img/post/【UE5 C++】Interface/8.png" width=800px><p>击中打印效果</p><img src="/res/img/post/【UE5 C++】Interface/9.png" width=800px><h1 id="接口说明符"><a href="#接口说明符" class="headerlink" title="接口说明符"></a>接口说明符</h1><table><thead><tr><th>接口说明符</th><th>描述</th></tr></thead><tbody><tr><td><code>Blueprintable</code></td><td>公开此接口，以便可以通过蓝图实现它。如果接口包含 <code>BlueprintImplementableEvent</code> 和 <code>BlueprintNativeEvent</code> 函数以外的任何内容，则无法向蓝图公开。使用 <code>NotBlueprintable</code> 或 <code>meta=(CannotImplementInterfaceInBlueprint)</code> 指定接口在蓝图中实现不安全。</td></tr><tr><td><code>BlueprintType</code></td><td>将此类公开为可用于蓝图中变量的类型。</td></tr><tr><td><code>DependsOn=(ClassName1, ClassName2, ...)</code></td><td>构建系统在编译此类之前会编译使用此说明符列出的所有类。 <code>ClassName</code> 必须指定同一（或先前）包中的类。您可以使用以逗号分隔的单个 <code>DependsOn</code> 行指定多个依赖项类，也可以为每个类使用单独的 <code>DependsOn</code> 行指定。</td></tr><tr><td><code>MinimalAPI</code></td><td>导致仅导出类的类型信息以供其他模块使用。可以转换为该类，但不能调用该类的函数，内联方法除外。通过避免导出不需要在其他模块中访问其所有函数的类的所有内容，可以缩短编译时间。</td></tr></tbody></table><h1 id="蓝图可调用接口函数"><a href="#蓝图可调用接口函数" class="headerlink" title="蓝图可调用接口函数"></a>蓝图可调用接口函数</h1><p>要制作蓝图可调用接口函数，您必须执行以下操作：</p><ul><li>使用 <code>BlueprintCallable</code> 说明符在函数声明中指定 <code>UFUNCTION</code> 宏</li><li>使用 <code>BlueprintImplementableEvent</code> 或 <code>BlueprintNativeEvent</code> 说明符</li></ul><blockquote><p>蓝图可调用接口函数不能是虚拟的。</p></blockquote><p>可以使用对实现接口的对象的引用在 C++ 或蓝图中调用带有 <code>BlueprintCallable</code> 说明符的函数。</p><blockquote><p>如果您的蓝图可调用函数不返回值，虚幻引擎会将您的函数视为蓝图中的事件。</p></blockquote><h1 id="Blueprint-Implementable-Event"><a href="#Blueprint-Implementable-Event" class="headerlink" title="Blueprint Implementable Event"></a>Blueprint Implementable Event</h1><p>带有 <code>BlueprintImplementableEvent</code> 说明符的函数不能在 C++ 中被覆盖，但可以在任何实现或继承您的接口的 Blueprint 类中被覆盖。以下是 <code>BlueprintImplementableEvent</code> 的 C++ 接口声明示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UObject/Interface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InteractInterface.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This class does not need to be modified.</span></span><br><span class="line"><span class="built_in">UINTERFACE</span>(MinimalAPI)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UInteractInterface</span> : <span class="keyword">public</span> UInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">INTERFACE_API</span> IInteractInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add interface functions to this class. This is the class that will be inherited to implement this interface.</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, BlueprintImplementableEvent, Category = <span class="string">&quot;Interface&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Interact</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>接口不能有实现</p></blockquote><img src="/res/img/post/【UE5 C++】Interface/10.png" width=800px><p>因为也不是虚函数了，所以派生类也不会有重写，需要删除</p><img src="/res/img/post/【UE5 C++】Interface/11.png" width=800px><p>现在 Build 成功，然后运行</p><p>这里按 F 调用 Interact 函数时报错</p><img src="/res/img/post/【UE5 C++】Interface/12.png" width=800px><p>需要换一种方式调用</p><img src="/res/img/post/【UE5 C++】Interface/13.png" width=800px><p>Build 运行，然后在蓝图类中添加实现</p><img src="/res/img/post/【UE5 C++】Interface/14.png" width=800px><img src="/res/img/post/【UE5 C++】Interface/15.png" width=800px><p>效果如下：</p><img src="/res/img/post/【UE5 C++】Interface/16.png" width=800px><h1 id="Blueprint-Native-Event"><a href="#Blueprint-Native-Event" class="headerlink" title="Blueprint Native Event"></a>Blueprint Native Event</h1><p>带有 <code>BlueprintNativeEvent</code> 说明符的函数可以在 C++ 或蓝图中实现。以下是 <code>BlueprintNativeEvent</code> 的 C++ 接口声明示例：</p><img src="/res/img/post/【UE5 C++】Interface/17.png" width=800px><img src="/res/img/post/【UE5 C++】Interface/18.png" width=800px><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ATestActorThatPrintLog::Interact_Implementation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;BlueprintNativeEvent!!! C++&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为刚才在测试 Actor 蓝图中重写了函数，所以效果如下</p><img src="/res/img/post/【UE5 C++】Interface/19.png" width=800px><p>删除重写的蓝图事件</p><img src="/res/img/post/【UE5 C++】Interface/20.png" width=800px><p>也可以 C++ 和 蓝图一起调用，因为我们的蓝图类是从 C++ 类派生出来的</p><img src="/res/img/post/【UE5 C++】Interface/21.png" width=800px><img src="/res/img/post/【UE5 C++】Interface/22.png" width=800px><p>效果如下：</p><img src="/res/img/post/【UE5 C++】Interface/23.png" width=800px><h1 id="判断一个类是否实现了一个接口"><a href="#判断一个类是否实现了一个接口" class="headerlink" title="判断一个类是否实现了一个接口"></a>判断一个类是否实现了一个接口</h1><p>为了与实现接口的 C++ 和 Blueprint 类兼容，请使用以下任意函数来确定类是否实现接口：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> bIsImplemented;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bIsImplemented is true if OriginalObject implements UReactToTriggerInterface */</span></span><br><span class="line">bIsImplemented = OriginalObject-&gt;<span class="built_in">GetClass</span>()-&gt;<span class="built_in">ImplementsInterface</span>(UReactToTriggerInterface::<span class="built_in">StaticClass</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bIsImplemented is true if OriginalObject implements UReactToTriggerInterface */</span></span><br><span class="line">bIsImplemented = OriginalObject-&gt;<span class="built_in">Implements</span>&lt;UReactToTriggerInterface&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ReactingObject is non-null if OriginalObject implements UReactToTriggerInterface in C++ */</span></span><br><span class="line">IReactToTriggerInterface* ReactingObject = <span class="built_in">Cast</span>&lt;IReactToTriggerInterface&gt;(OriginalObject);</span><br></pre></td></tr></table></figure><p>我们可以更改一下代码</p><img src="/res/img/post/【UE5 C++】Interface/24.png" width=800px><p>这样更简洁了</p><h1 id="安全存储对象和接口指针"><a href="#安全存储对象和接口指针" class="headerlink" title="安全存储对象和接口指针"></a>安全存储对象和接口指针</h1><p>要存储对实现特定接口的对象的引用，可以使用 <code>TScriptInterface</code> 。如果您有一个实现接口的对象，则可以按如下方式初始化 <code>TScriptInterface</code> ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UMyObject* MyObjectPtr;</span><br><span class="line">TScriptInterface&lt;IMyInterface&gt; MyScriptInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (MyObjectPtr-&gt;<span class="built_in">Implements</span>&lt;UMyInterface&gt;())</span><br><span class="line">&#123;</span><br><span class="line">    MyScriptInterface = <span class="built_in">TScriptInterface</span>&lt;IMyInterface&gt;(MyObjectPtr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyScriptInterface holds a reference to MyObjectPtr and MyInterfacePtr</span></span><br></pre></td></tr></table></figure><p>要检索指向原始对象的指针，请使用 <code>GetObject</code> ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UMyObject* MyRetrievedObjectPtr = MyScriptInterface.<span class="built_in">GetObject</span>();</span><br></pre></td></tr></table></figure><p>要检索指向原始对象实现的接口的指针，请使用 <code>GetInterface</code> ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IMyInterface* MyRetrievedInterfacePtr = MyScriptInterface.<span class="built_in">GetInterface</span>();</span><br></pre></td></tr></table></figure><h1 id="蓝图可实现接口"><a href="#蓝图可实现接口" class="headerlink" title="蓝图可实现接口"></a>蓝图可实现接口</h1><p>如果您希望蓝图实现此接口，则必须使用 <code>Blueprintable</code> 元数据说明符。每个接口函数（静态函数除外）都必须是 <code>BlueprintNativeEvent</code> 或 <code>BlueprintImplementableEvent</code> 。当蓝图实现用 C++ 声明的接口时，它的工作方式类似于蓝图接口资产。这意味着该 Blueprint 类的实例实际上不会包含该接口的 C++ 版本，因此它不能与 <code>Cast&lt;&gt;</code> 一起使用。在 C++ 中，只有 <code>Execute_</code> 静态包装函数才能正常工作。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>UE5.3 DOC: <a href="https://docs.unrealengine.com/5.3/en-US/interfaces-in-unreal-engine/">https://docs.unrealengine.com/5.3/en-US/interfaces-in-unreal-engine/</a></p><p>Sneaky Kitty Game Dev: <a href="https://www.youtube.com/playlist?list=PLnHeglBaPYu_m0ju9UKVJXyDN1Yo5JvyM">https://www.youtube.com/playlist?list=PLnHeglBaPYu_m0ju9UKVJXyDN1Yo5JvyM</a></p><p>The End.</p>]]></content>
      
      
      
        <tags>
            
            <tag> UE5 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE5 C++ 加载 Json 文件</title>
      <link href="/2024/02/21/%E3%80%90UE5%20C++%E3%80%91%E5%8A%A0%E8%BD%BD%20Json%20%E6%96%87%E4%BB%B6/"/>
      <url>/2024/02/21/%E3%80%90UE5%20C++%E3%80%91%E5%8A%A0%E8%BD%BD%20Json%20%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<iframe src="https://player.bilibili.com/player.html?aid=1900966805&bvid=BV1pm411S7Hn&cid=1447927173&p=1&high_quality=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="添加-Json-模块"><a href="#添加-Json-模块" class="headerlink" title="添加 Json 模块"></a>添加 Json 模块</h1><img src="/res/img/post/【UE5 C++】加载 Json 文件/1.png" width=800px><h1 id="加载并读取-Json-文件"><a href="#加载并读取-Json-文件" class="headerlink" title="加载并读取 Json 文件"></a>加载并读取 Json 文件</h1><ol><li>包含头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Serialization/JsonReader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Dom/JsonObject.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Serialization/JsonSerializer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Misc/FileHelper.h&quot;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建函数 <code>LoadStringFromFile</code>，用来读取文件中的字符串</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ARPGCharacter::LoadStringFromFile</span><span class="params">(<span class="type">const</span> FString&amp; FileName, <span class="type">const</span> FString&amp; RelativePath, FString&amp; ResultString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!FileName.<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// FPaths::ProjectContentDir() 是 Content 目录下</span></span><br><span class="line">FString AbsolutePath = FPaths::<span class="built_in">ProjectContentDir</span>() + RelativePath + FileName;</span><br><span class="line"><span class="keyword">if</span> (FPaths::<span class="built_in">FileExists</span>(AbsolutePath))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (FFileHelper::<span class="built_in">LoadFileToString</span>(ResultString, *AbsolutePath))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Load Error!&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;File Not Exist!&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>读取 Json 文件示例</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ARPGCharacter::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"></span><br><span class="line">FString jsonStr;</span><br><span class="line"><span class="comment">// 加载 Json 文件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LoadStringFromFile</span>(<span class="string">&quot;Player.json&quot;</span>, <span class="string">&quot;../LoadJsonFileTestConfig/&quot;</span>, jsonStr))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 创建 Json 阅读器</span></span><br><span class="line">TSharedRef&lt;TJsonReader&lt;&gt;&gt; jsonReader = TJsonReaderFactory&lt;TCHAR&gt;::<span class="built_in">Create</span>(jsonStr);</span><br><span class="line"><span class="comment">// 创建 Json 对象</span></span><br><span class="line">TSharedPtr&lt;FJsonObject&gt; jsonObject;</span><br><span class="line"><span class="comment">// 反序列化，将 JsonReader 里的数据，传入 JsonObject 中</span></span><br><span class="line">FJsonSerializer::<span class="built_in">Deserialize</span>(jsonReader, jsonObject);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取单行数据</span></span><br><span class="line">FString timeStr = jsonObject-&gt;<span class="built_in">GetStringField</span>(<span class="string">&quot;Time&quot;</span>);</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Time: %s&quot;</span>), *timeStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数组数据</span></span><br><span class="line">TArray&lt;TSharedPtr&lt;FJsonValue&gt;&gt; data = jsonObject-&gt;<span class="built_in">GetArrayField</span>(<span class="string">&quot;Data&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; data.<span class="built_in">Num</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">FString dataStr1 = data[i]-&gt;<span class="built_in">AsObject</span>()-&gt;<span class="built_in">GetStringField</span>(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">FString dataStr2 = data[i]-&gt;<span class="built_in">AsObject</span>()-&gt;<span class="built_in">GetStringField</span>(<span class="string">&quot;key2&quot;</span>);</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Data:&quot;</span>));</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;key1: %s&quot;</span>), *dataStr1);</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;key2: %s&quot;</span>), *dataStr2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>示例 Json 文件路径</li></ol><img src="/res/img/post/【UE5 C++】加载 Json 文件/2.png" width=800px><img src="/res/img/post/【UE5 C++】加载 Json 文件/3.png" width=800px><p><code>Player.json</code> 内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Time&quot;</span><span class="punctuation">:</span><span class="string">&quot;2024-02-21&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;key2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;345&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;666&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;key2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;520&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>打印效果</li></ol><img src="/res/img/post/【UE5 C++】加载 Json 文件/4.png" width=800px><h1 id="创建并写入-Json-文件"><a href="#创建并写入-Json-文件" class="headerlink" title="创建并写入 Json 文件"></a>创建并写入 Json 文件</h1><ol><li>包含头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Policies/CondensedJsonPrintPolicy.h&quot;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>新建函数 <code>SaveStringToFile</code>，用来保存字符串到文件中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ARPGCharacter::SaveStringToFile</span><span class="params">(<span class="type">const</span> FString&amp; FileName, <span class="type">const</span> FString&amp; RelativePath, FString&amp; TargetString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!FileName.<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// FPaths::ProjectContentDir() 是 Content 目录下</span></span><br><span class="line">FString AbsolutePath = FPaths::<span class="built_in">ProjectContentDir</span>() + RelativePath + FileName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FFileHelper::<span class="built_in">SaveStringToFile</span>(TargetString, *AbsolutePath))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Save Error!&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>写入 Json 文件示例</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ARPGCharacter::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"></span><br><span class="line">FString jsonStr;</span><br><span class="line"><span class="comment">// 创建 Json 写入器</span></span><br><span class="line">TSharedRef&lt;TJsonWriter&lt;TCHAR, TCondensedJsonPrintPolicy&lt;TCHAR&gt;&gt;&gt; jsonWritter = TJsonWriterFactory&lt;TCHAR, TCondensedJsonPrintPolicy&lt;TCHAR&gt;&gt;::<span class="built_in">Create</span>(&amp;jsonStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始写入</span></span><br><span class="line">jsonWritter-&gt;<span class="built_in">WriteObjectStart</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入单行数据</span></span><br><span class="line">jsonWritter-&gt;<span class="built_in">WriteValue</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Time&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;2024-02-21&quot;</span>));</span><br><span class="line"><span class="comment">// 写入数组数据</span></span><br><span class="line">jsonWritter-&gt;<span class="built_in">WriteArrayStart</span>(<span class="string">&quot;Data&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">jsonWritter-&gt;<span class="built_in">WriteObjectStart</span>();</span><br><span class="line">jsonWritter-&gt;<span class="built_in">WriteValue</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;key1&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;100&quot;</span>));</span><br><span class="line">jsonWritter-&gt;<span class="built_in">WriteValue</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;key2&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;200&quot;</span>));</span><br><span class="line">jsonWritter-&gt;<span class="built_in">WriteObjectEnd</span>();</span><br><span class="line">&#125;</span><br><span class="line">jsonWritter-&gt;<span class="built_in">WriteArrayEnd</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止写入</span></span><br><span class="line">jsonWritter-&gt;<span class="built_in">WriteObjectEnd</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭写入器</span></span><br><span class="line">jsonWritter-&gt;<span class="built_in">Close</span>();</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;%s&quot;</span>), *jsonStr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">SaveStringToFile</span>(<span class="string">&quot;Write.json&quot;</span>, <span class="string">&quot;../LoadJsonFileTestConfig/&quot;</span>, jsonStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>写入效果</li></ol><img src="/res/img/post/【UE5 C++】加载 Json 文件/5.png" width=800px><img src="/res/img/post/【UE5 C++】加载 Json 文件/6.png" width=800px><img src="/res/img/post/【UE5 C++】加载 Json 文件/7.png" width=800px><p>The End.</p>]]></content>
      
      
      
        <tags>
            
            <tag> UE5 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Nginx部署博客</title>
      <link href="/2024/02/20/Hexo+Nginx%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/02/20/Hexo+Nginx%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>以 Butterfly 主题为例，使用 nginx 进行部署到云服务器上</p><p>可以参考 Butterfly 文档的快速开始：<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p><p>开发风格因人而异，可能会与你想的有所不同，还请包涵^ ^</p><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><h2 id="下载-Git-和-Nodejs"><a href="#下载-Git-和-Nodejs" class="headerlink" title="下载 Git 和 Nodejs"></a>下载 Git 和 Nodejs</h2><p>git: <a href="https://git-scm.com/">https://git-scm.com/</a><br>nodejs: <a href="https://nodejs.org/en">https://nodejs.org/en</a></p><h2 id="局部安装-hexo"><a href="#局部安装-hexo" class="headerlink" title="局部安装 hexo"></a>局部安装 hexo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo</span></span><br></pre></td></tr></table></figure><h1 id="开始建站"><a href="#开始建站" class="headerlink" title="开始建站"></a>开始建站</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npx hexo init Myblog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> Myblog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br></pre></td></tr></table></figure><h2 id="下载并应用-butterfly-主题"><a href="#下载并应用-butterfly-主题" class="headerlink" title="下载并应用 butterfly 主题"></a>下载并应用 butterfly 主题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>修改 Hexo 根目录下的 _config.yml，把主题改为 butterfly</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h2 id="升级建议"><a href="#升级建议" class="headerlink" title="升级建议"></a>升级建议</h2><p>为了减少升级主题后带来的不便，请使用以下方法（建议，可以不做）。</p><p>在 hexo 的根目录创建一个文件 <code>_config.butterfly.yml</code>，并把主题目录的 <code>_config.yml</code> 内容复制到 <code>_config.butterfly.yml</code> 去。( 注意: 复制的是主题的 <code>_config.yml</code> ，而不是 hexo 的 <code>_config.yml</code>)</p><blockquote><p>注意： 不要把主题目录的 <code>_config.yml</code> 删掉</p></blockquote><blockquote><p>注意： 以后只需要在 <code>_config.butterfly.yml</code> 进行配置就行。<br>如果使用了 <code>_config.butterfly.yml</code>， 配置主题的 <code>_config.yml</code> 将不会有效果。</p></blockquote><p>Hexo 会自动合并主题中的 <code>_config.yml</code> 和 <code>_config.butterfly.yml</code> 里的配置，如果存在同名配置，会使用 <code>_config.butterfly.yml</code> 的配置，其优先度较高。</p><img src="/res/img/post/Hexo+Nginx部署博客/1.png" width=800px><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>接下来就是主题配置，文档比我更详细：<a href="https://butterfly.js.org/posts/4aa8abbe/">https://butterfly.js.org/posts/4aa8abbe/</a></p><p>可以按自己想要的配置^ ^</p><p>下面列出我目前所修改的内容：</p><ol><li>站点配置文件 <code>_config.yml</code> 修改</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">AnnihilateSword</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Jinkun</span> <span class="string">Ou</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yunmiezhijian.top/</span></span><br></pre></td></tr></table></figure><ol><li>菜单|目录</li></ol><p>主题配置文件中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Menu 目錄</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="comment"># List||fas fa-list:</span></span><br><span class="line">  <span class="comment">#   Music: /music/ || fas fa-music</span></span><br><span class="line">  <span class="comment">#   Movie: /movies/ || fas fa-video</span></span><br><span class="line">  <span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><ol start="3"><li>高亮主题</li></ol><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code Blocks (代碼相關)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span> <span class="comment">#  darker / pale night / light / ocean / mac / mac light / false</span></span><br></pre></td></tr></table></figure><ol start="4"><li>社交图标</li></ol><p>Butterfly支持 <a href="https://fontawesome.com/icons?from=io">font-awesome v6</a> 图标.</p><p>书写格式 <code>图标名：url || 描述性文字 || color</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social Settings (社交圖標設置)</span></span><br><span class="line"><span class="comment"># formal:</span></span><br><span class="line"><span class="comment">#   icon: link || the description || color</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="comment"># fab fa-github: https://github.com/xxxxx || Github || &#x27;#24292e&#x27;</span></span><br><span class="line">  <span class="comment"># fas fa-envelope: mailto:xxxxxx@gmail.com || Email || &#x27;#4a7dbe&#x27;</span></span><br><span class="line">  <span class="attr">fa-brands fa-zhihu:</span> <span class="string">https://www.zhihu.com/people/AnnhiliateSword</span> <span class="string">||</span> <span class="string">Zhihu</span> <span class="string">||</span> <span class="string">&#x27;#4a7dbe&#x27;</span></span><br><span class="line">  <span class="attr">fa-brands fa-bilibili:</span> <span class="string">https://space.bilibili.com/445428089</span> <span class="string">||</span> <span class="string">Bilibili</span> <span class="string">||</span> <span class="string">&#x27;#4a7dbe&#x27;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>网站图标|头像</li></ol><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Favicon（網站圖標）</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/_res/img/site/head.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Avatar (頭像)</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/_res/img/site/head.jpg</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的根目录相对于 hexo init 创建的项目目录，我这里是 <code>Myblog/source/_res/img/site</code></p></blockquote><ol start="6"><li>顶部图</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disable all banner image</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/res/img/site/samurai.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of archive page</span></span><br><span class="line"><span class="attr">archive_img:</span> <span class="string">/res/img/site/samurai.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of tag page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> tag page, not tags page (子標籤頁面的 top_img)</span></span><br><span class="line"><span class="attr">tag_img:</span> <span class="string">/res/img/site/samurai.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of tag page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - tag name: xxxxx</span></span><br><span class="line"><span class="attr">tag_per_img:</span> <span class="string">/res/img/site/samurai.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of category page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> category page, not categories page (子分類頁面的 top_img)</span></span><br><span class="line"><span class="attr">category_img:</span> <span class="string">/res/img/site/samurai.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of category page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - category name: xxxxx</span></span><br><span class="line"><span class="attr">category_per_img:</span> <span class="string">/res/img/site/samurai.png</span></span><br></pre></td></tr></table></figure><blockquote><p>不要以下划线开头，比如 _res，会无法识别图片</p></blockquote><ol start="7"><li>TOC</li></ol><p>在文章页，会有一个目录，用于显示TOC。</p><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># toc (目錄)</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># for post</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="8"><li>相关文章</li></ol><blockquote><p>当文章封面设置为 false 时，或者没有获取到封面配置，相关文章背景将会显示主题色。</p></blockquote><p>相关文章推荐的原理是根据文章tags的比重来推荐</p><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Related Articles</span></span><br><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># Number of posts displayed</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># or created or updated 文章日期顯示創建日或者更新日</span></span><br></pre></td></tr></table></figure><ol start="9"><li>Footer 设置</li></ol><p>博客年份</p><p><code>since</code>是一个来展示你站点起始时间的选项。它位于页面的最底部。</p><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Footer Settings</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2024</span></span><br><span class="line">  <span class="attr">custom_text:</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span> <span class="comment"># Copyright of theme and framework</span></span><br></pre></td></tr></table></figure><ol start="10"><li>侧边栏</li></ol><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aside (側邊欄)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">Follow</span> <span class="string">Me</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/AnnihilateSword</span></span><br></pre></td></tr></table></figure><ol start="11"><li>运行时间</li></ol><p>网页已运行时间</p><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time difference between publish date and now (網頁運行時間)</span></span><br><span class="line"><span class="comment"># Formal: Month/Day/Year Time or Year/Month/Day Time</span></span><br><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">2</span><span class="string">/19/2024</span> <span class="number">23</span><span class="string">:54:00</span></span><br></pre></td></tr></table></figure><ol start="12"><li>右下角按钮</li></ol><p>简体繁体互换</p><p>右下角会有简繁转换按钮。</p><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Conversion between Traditional and Simplified Chinese (簡繁轉換)</span></span><br><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The text of a button</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">简</span></span><br><span class="line">  <span class="comment"># the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Simplified Chinese</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Traditional Chinese</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;簡&#x27;</span></span><br></pre></td></tr></table></figure><ol start="13"><li>夜间模式</li></ol><p>右下角会有夜间模式按钮</p><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Toggle Button to switch dark/light mode</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Switch dark/light mode automatically (自動切換 dark mode和 light mode)</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 1  Following System Settings, if the system doesn&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Set the light mode time. The value is between 0 and 24. If not set, the default value is 6 and 18</span></span><br><span class="line">  <span class="attr">start:</span> <span class="comment"># 8</span></span><br><span class="line">  <span class="attr">end:</span> <span class="comment"># 22</span></span><br></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>文档：<a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a></p><p>安装 hexo-generator-search</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-generator-search --save</span></span><br></pre></td></tr></table></figure><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br></pre></td></tr></table></figure><h3 id="美化-特效"><a href="#美化-特效" class="headerlink" title="美化|特效"></a>美化|特效</h3><h4 id="自定义主题颜色"><a href="#自定义主题颜色" class="headerlink" title="自定义主题颜色"></a>自定义主题颜色</h4><p>可以修改大部分UI颜色</p><p>修改 <code>主题配置文件</code>，比如：</p><blockquote><p>颜色值必须被双引号包裹，就像 “#000” 而不是 #000。否则将会在构建的时候报错！</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">&quot;#49B1F5&quot;</span></span><br><span class="line">  <span class="attr">paginator:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">button_hover:</span> <span class="string">&quot;#FF7242&quot;</span></span><br><span class="line">  <span class="attr">text_selection:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">link_color:</span> <span class="string">&quot;#99a9bf&quot;</span></span><br><span class="line">  <span class="attr">meta_color:</span> <span class="string">&quot;#858585&quot;</span></span><br><span class="line">  <span class="attr">hr_color:</span> <span class="string">&quot;#A4D8FA&quot;</span></span><br><span class="line">  <span class="attr">code_foreground:</span> <span class="string">&quot;#F47466&quot;</span></span><br><span class="line">  <span class="attr">code_background:</span> <span class="string">&quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class="line">  <span class="attr">toc_color:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">blockquote_padding_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">blockquote_background_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">scrollbar_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">meta_theme_color_light:</span> <span class="string">&quot;ffffff&quot;</span></span><br><span class="line">  <span class="attr">meta_theme_color_dark:</span> <span class="string">&quot;#0d0d0d&quot;</span></span><br></pre></td></tr></table></figure><h4 id="footer-背景"><a href="#footer-背景" class="headerlink" title="footer 背景"></a>footer 背景</h4><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="打字效果"><a href="#打字效果" class="headerlink" title="打字效果"></a>打字效果</h4><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line"><span class="comment"># https://github.com/disjukr/activate-power-mode</span></span><br><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span> <span class="comment"># open particle animation (冒光特效)</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span> <span class="comment">#  open shake (抖動特效)</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h4><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)</span></span><br><span class="line"><span class="attr">click_heart:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="网站副标题"><a href="#网站副标题" class="headerlink" title="网站副标题"></a>网站副标题</h4><p>可设置主页中显示的网站副标题或者喜欢的座右铭。</p><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the subtitle on homepage (主頁subtitle)</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize typed.js (配置typed.js)</span></span><br><span class="line">  <span class="comment"># https://github.com/mattboldt/typed.js/#customization</span></span><br><span class="line">  <span class="attr">typed_option:</span></span><br><span class="line">  <span class="comment"># source 調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一句網（簡體） https://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">不要轻言放弃</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Don&#x27;t</span> <span class="string">give</span> <span class="string">up.</span></span><br></pre></td></tr></table></figure><h4 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h4><p>当进入网页时，因为加载速度的问题，可能会导致 top_img 图片出现断层显示，或者网页加载不全而出现等待时间，开启preloader后，会显示加载动画，等页面加载完，加载动画会消失。</p><p>主题支持 pace.js 的加载动画，具体可查看 <a href="https://codebyzach.github.io/pace/">pace.js</a></p><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Loading Animation (加載動畫)</span></span><br><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source</span></span><br><span class="line">  <span class="comment"># 1. fullpage-loading</span></span><br><span class="line">  <span class="comment"># 2. pace (progress bar)</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># pace theme (see https://codebyzach.github.io/pace/)</span></span><br><span class="line">  <span class="attr">pace_css_url:</span></span><br></pre></td></tr></table></figure><h4 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h4><p>要为<code>Butterfly</code>配上字数统计特性, 你需要如下几个步骤:</p><p>打开 hexo 工作目录</p><p><code>npm install hexo-wordcount --save</code></p><p>修改 <code>主题配置文件</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wordcount (字數統計)</span></span><br><span class="line"><span class="comment"># see https://butterfly.js.org/posts/ceeb73f/#字數統計</span></span><br><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="nstantpage"><a href="#nstantpage" class="headerlink" title="nstantpage"></a>nstantpage</h4><p>当鼠标悬停到链接上超过 65 毫秒时，Instantpage 会对该链接进行预加载，可以提升访问速度。</p><p>修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://instant.page/</span></span><br><span class="line"><span class="comment"># prefetch (預加載)</span></span><br><span class="line"><span class="attr">instantpage:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="Pangu"><a href="#Pangu" class="headerlink" title="Pangu"></a>Pangu</h4><p>如果你跟我一样，每次看到网页上的中文字和英文、数字、符号挤在一块，就会坐立难安，忍不住想在它们之间加个空格。这个外挂正是你在网路世界走跳所需要的东西，它会自动替你在网页中所有的中文字和半形的英文、数字、符号之间插入空白。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/vinta/pangu.js</span></span><br><span class="line"><span class="comment"># Insert a space between Chinese character and English character (中英文之間添加空格)</span></span><br><span class="line"><span class="attr">pangu:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post</span></span><br></pre></td></tr></table></figure><h4 id="CSS前缀"><a href="#CSS前缀" class="headerlink" title="CSS前缀"></a>CSS前缀</h4><p>有些 CSS 并不是所有浏览器都支持，需要增加对应的前缀才会生效。</p><p>开启 <code>css_prefix</code> 后，会自动为一些 CSS 增加前缀。（会增加 20%的体积）</p><p>修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Add the vendor prefixes to ensure compatibility</span></span><br><span class="line"><span class="attr">css_prefix:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="主题页面添加"><a href="#主题页面添加" class="headerlink" title="主题页面添加"></a>主题页面添加</h3><h4 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h4><ol><li><p>前往你的 Hexo 博客的根目录</p></li><li><p>输入 <code>npx hexo new page tags</code></p></li><li><p>你会找到 <code>source/tags/index.md</code> 这个文件</p></li><li><p>修改这个文件：</p><p> 记得添加 <code>type: &quot;tags&quot;</code></p></li></ol><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Tags</span><br><span class="line">date: 2024-02-20 01:23:49</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips: 添加一个标签再删除需要 npx hexo clean 清理数据库才能生效</p></blockquote><h4 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h4><ol><li><p>前往你的 Hexo 博客的根目录</p></li><li><p>输入 <code>npx hexo new page categories</code></p></li><li><p>你会找到 <code>source/categories/index.md</code> 这个文件</p></li><li><p>修改这个文件：</p><p> 记得添加 <code>type: &quot;categories&quot;</code></p></li></ol><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2024-02-20 01:25:07</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h4 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h4><p>为你的博客创建一个友情链接！</p><ul><li>创建友链页面</li></ul><ol><li><p>前往你的 Hexo 博客的根目录</p></li><li><p>输入 <code>npx hexo new page link</code></p></li><li><p>你会找到 <code>source/link/index.md</code> 这个文件</p></li><li><p>修改这个文件：</p><p> 记得添加 <code>type: &quot;link&quot;</code></p></li></ol><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: link</span><br><span class="line">date: 2024-02-20 01:26:39</span><br><span class="line"><span class="section">type: &quot;link&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><ul><li>友链添加</li></ul><p>在Hexo博客目录中的 <code>source/_data</code>（如果没有 _data 文件夹，请自行创建），创建一个文件 <code>link.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">好友</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">都哥</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://ahucd.cn/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://ahucd.cn/img/avatar.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">天剑行风</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Bilibili</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.bilibili.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">/res/img/site/bilibili.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br></pre></td></tr></table></figure><p><code>class_name</code> 和 <code>class_desc</code> 支持 html 格式书写，如不需要，也可以留空。</p><blockquote><p>主题支持友情链接随机排序，只需要在顶部 <code>front-matter</code> 添加 <code>random: true</code></p></blockquote><h4 id="子页面"><a href="#子页面" class="headerlink" title="子页面"></a>子页面</h4><p>子页面也是普通的页面，你只需要 <code>hexo n page xxxxx</code> 创建你的页面就行</p><p>例如创建 About 页面</p><h2 id="文章常用设置"><a href="#文章常用设置" class="headerlink" title="文章常用设置"></a>文章常用设置</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: UE5 C++ 加载 Json 文件</span><br><span class="line">tags: [UE5, C++]</span><br><span class="line">cover: /res/img/post/UE5 C++ 加载 Json 文件/1.png</span><br><span class="line"><span class="section">top<span class="emphasis">_img: /res/img/site/samurai.png</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure><ul><li>title: 标题</li><li>tags: 标签</li><li>cover: 设置封面</li><li>top_img：设置顶部图片</li></ul><p><code>npx hexo n page about</code></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>为了方便维护，我个人这里使用的是 Windows + Nginx 的方式在云服务器上部署</p><h2 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>在云服务器上我们也需要安装 Git 和 Nodejs</p><p>git: <a href="https://git-scm.com/">https://git-scm.com/</a><br>nodejs: <a href="https://nodejs.org/en">https://nodejs.org/en</a></p><h2 id="网站项目上传-Git"><a href="#网站项目上传-Git" class="headerlink" title="网站项目上传 Git"></a>网站项目上传 Git</h2><p>这里我上传 Github</p><blockquote><p>在上传前，建议先备份一下项目，避免损失</p></blockquote><p>在真正上传前，我还要做一些操作</p><ol><li><p>删除主题 butterfly 文件夹中的 <code>.git</code> 文件夹，我打算手动更新，避免云服务器上 clone 时有问题</p></li><li><p>将项目文件夹下的 <code>.gitignore</code> 文件删除，我打算全部上传，维护整个项目</p></li><li><p>生成静态文件<br><code>npx hexo g</code></p></li></ol><p>做完这些操作后，就可以新建一个仓库，将整个项目上传上去了</p><img src="/res/img/post/Hexo+Nginx部署博客/2.png" width=800px><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;&lt;feat&gt;: init&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push</span></span><br></pre></td></tr></table></figure><h2 id="云服务器上应用项目"><a href="#云服务器上应用项目" class="headerlink" title="云服务器上应用项目"></a>云服务器上应用项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name xxx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email xxx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> xxx</span></span><br></pre></td></tr></table></figure><h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>打开 <code>nginx.conf</code> 在 http 下添加</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名/IP;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root xxx/public;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>验证配置是否 ok</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./nginx.exe -t -c ./conf/nginx.conf</span></span><br></pre></td></tr></table></figure><ul><li>重启 nginx</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./nginx.exe -s reload</span></span><br></pre></td></tr></table></figure><blockquote><p>Tip：有时候 404 是端口被占用引起的，可以重启一下</p></blockquote><p>有些服务器需要手动开启端口防火墙，以我这里为例</p><img src="/res/img/post/Hexo+Nginx部署博客/3.png" width=800px><img src="/res/img/post/Hexo+Nginx部署博客/4.png" width=800px><img src="/res/img/post/Hexo+Nginx部署博客/5.png" width=800px><img src="/res/img/post/Hexo+Nginx部署博客/6.png" width=800px><img src="/res/img/post/Hexo+Nginx部署博客/7.png" width=800px><p>通过公网 IP 访问进行测试</p><img src="/res/img/post/Hexo+Nginx部署博客/8.png" width=800px><h1 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h1><p>这里以腾讯云为例</p><ul><li>需要先购买一个域名</li></ul><img src="/res/img/post/Hexo+Nginx部署博客/9.png" width=800px><img src="/res/img/post/Hexo+Nginx部署博客/10.png" width=800px><img src="/res/img/post/Hexo+Nginx部署博客/11.png" width=800px><img src="/res/img/post/Hexo+Nginx部署博客/12.png" width=800px><ul><li>刚购买好需要等待审核，这里以我之前买的域名为例，添加解析</li></ul><img src="/res/img/post/Hexo+Nginx部署博客/13.png" width=800px><img src="/res/img/post/Hexo+Nginx部署博客/14.png" width=800px><img src="/res/img/post/Hexo+Nginx部署博客/15.png" width=800px><img src="/res/img/post/Hexo+Nginx部署博客/16.png" width=800px><ul><li>最终效果</li></ul><img src="/res/img/post/Hexo+Nginx部署博客/17.png" width=800px><p>The End.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo建站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
